/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 29 times
    AndGate - 96 times
    Output - 27 times
    NotGate - 26 times
    OrGate - 19 times
    ConstantVal - 3 times
    Splitter - 6 times
    SubCircuit - 14 times
    DigitalLed - 6 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg [2:0] D2, D5, D4, D3, D6, D1;

  wire P1, P2, P5, P4, P6, P3;

  Main DUT0(P1, P2, P5, P4, P6, P3, D2, D5, D4, D3, D6, D1);

  initial begin
    D2 = 0;
    D5 = 0;
    D4 = 0;
    D3 = 0;
    D6 = 0;
    D1 = 0;

    #15
    $display("P1 = %b", P1);
    $display("P2 = %b", P2);
    $display("P5 = %b", P5);
    $display("P4 = %b", P4);
    $display("P6 = %b", P6);
    $display("P3 = %b", P3);

    #10
    $display("P1 = %b", P1);
    $display("P2 = %b", P2);
    $display("P5 = %b", P5);
    $display("P4 = %b", P4);
    $display("P6 = %b", P6);
    $display("P3 = %b", P3);

    $finish;

  end
endmodule

*/

module Dice_Value_Decoder(R0, R1, R2, R3, R4, R5, R6, R7, A, B, C);
  output R0,  R1,  R2,  R3,  R4,  R5,  R6,  R7;
  input A, B, C;
  wire and_7_out, and_5_out, and_3_out, and_1_out, not_2_out, and_6_out, and_4_out, and_2_out, and_0_out, not_1_out, not_0_out;
  assign and_7_out = A & B & C;
  assign R7 = and_7_out;
  assign and_5_out = A & not_1_out & C;
  assign R5 = and_5_out;
  assign and_3_out = not_0_out & B & C;
  assign R3 = and_3_out;
  assign and_1_out = not_0_out & not_1_out & C;
  assign R1 = and_1_out;
  assign not_2_out = ~C;
  assign and_6_out = A & B & not_2_out;
  assign R6 = and_6_out;
  assign and_4_out = A & not_1_out & not_2_out;
  assign R4 = and_4_out;
  assign and_2_out = not_0_out & B & not_2_out;
  assign R2 = and_2_out;
  assign and_0_out = not_0_out & not_1_out & not_2_out;
  assign R0 = and_0_out;
  assign not_1_out = ~B;
  assign not_0_out = ~A;
endmodule

module Counter(F1, F2, F3, F4, F5, F6, D1, D2, D3, D4, D5, D6);
  output F1,  F2,  F3,  F4,  F5,  F6;
  input D1, D2, D3, D4, D5, D6;
  wire and_62_out, and_60_out, or_4_out, and_59_out, and_58_out, and_57_out, and_56_out, and_53_out, or_3_out, and_51_out, and_50_out, and_48_out, and_47_out, and_46_out, and_44_out, and_43_out, and_42_out, and_41_out, and_37_out, or_2_out, and_34_out, and_32_out, and_31_out, and_28_out, and_26_out, and_25_out, and_23_out, and_22_out, and_21_out, and_16_out, or_1_out, and_12_out, and_9_out, and_7_out, and_6_out, and_0_out, or_0_out, not_5_out, and_61_out, and_55_out, and_54_out, and_52_out, and_49_out, and_45_out, and_40_out, and_39_out, and_38_out, and_36_out, and_35_out, and_33_out, and_30_out, and_29_out, and_27_out, and_24_out, and_20_out, and_19_out, and_18_out, and_17_out, and_15_out, and_14_out, and_13_out, and_11_out, and_10_out, and_8_out, and_5_out, and_4_out, and_3_out, and_2_out, and_1_out, not_4_out, not_3_out, not_2_out, not_1_out, not_0_out, _C_, not_6_out;
  assign and_62_out = D1 & D2 & D3 & D4 & D5 & D6;
  assign F6 = and_62_out;
  assign and_60_out = D1 & D2 & D3 & D4 & not_4_out & D6;
  assign or_4_out = and_56_out | and_57_out | and_58_out | and_59_out | and_60_out | and_61_out;
  assign F5 = or_4_out;
  assign and_59_out = D1 & D2 & D3 & not_3_out & D5 & D6;
  assign and_58_out = D1 & D2 & not_2_out & D4 & D5 & D6;
  assign and_57_out = D1 & not_1_out & D3 & D4 & D5 & D6;
  assign and_56_out = not_0_out & D2 & D3 & D4 & D5 & D6;
  assign and_53_out = D1 & D2 & D3 & not_3_out & not_4_out & D6;
  assign or_3_out = and_41_out | and_42_out | and_43_out | and_44_out | and_45_out | and_46_out | and_47_out | and_48_out | and_49_out | and_50_out | and_51_out | and_52_out | and_53_out | and_54_out | and_55_out;
  assign F4 = or_3_out;
  assign and_51_out = D1 & D2 & not_2_out & D4 & not_4_out & D6;
  assign and_50_out = D1 & D2 & not_2_out & not_3_out & D5 & D6;
  assign and_48_out = D1 & not_1_out & D3 & D4 & not_4_out & D6;
  assign and_47_out = D1 & not_1_out & D3 & not_3_out & D5 & D6;
  assign and_46_out = D1 & not_1_out & not_2_out & D4 & D5 & D6;
  assign and_44_out = not_0_out & D2 & D3 & D4 & not_4_out & D6;
  assign and_43_out = not_0_out & D2 & D3 & not_3_out & D5 & D6;
  assign and_42_out = not_0_out & D2 & not_2_out & D4 & D5 & D6;
  assign and_41_out = not_0_out & not_1_out & D3 & D4 & D5 & D6;
  assign and_37_out = D1 & D2 & not_2_out & not_3_out & not_4_out & D6;
  assign or_2_out = and_21_out | and_22_out | and_23_out | and_24_out | and_25_out | and_26_out | and_27_out | and_28_out | and_29_out | and_30_out | and_31_out | and_32_out | and_33_out | and_34_out | and_35_out | and_36_out | and_37_out | and_38_out | and_39_out | and_40_out;
  assign F3 = or_2_out;
  assign and_34_out = D1 & not_1_out & D3 & not_3_out & not_4_out & D6;
  assign and_32_out = D1 & not_1_out & not_2_out & D4 & not_4_out & D6;
  assign and_31_out = D1 & not_1_out & not_2_out & not_3_out & D5 & D6;
  assign and_28_out = not_0_out & D2 & D3 & not_3_out & not_4_out & D6;
  assign and_26_out = not_0_out & D2 & not_2_out & D4 & not_4_out & D6;
  assign and_25_out = not_0_out & D2 & not_2_out & not_3_out & D5 & D6;
  assign and_23_out = not_0_out & not_1_out & D3 & D4 & not_4_out & D6;
  assign and_22_out = not_0_out & not_1_out & D3 & not_3_out & D5 & D6;
  assign and_21_out = not_0_out & not_1_out & not_2_out & D4 & D5 & D6;
  assign and_16_out = D1 & not_1_out & not_2_out & not_3_out & not_4_out & D6;
  assign or_1_out = and_6_out | and_7_out | and_8_out | and_9_out | and_10_out | and_11_out | and_12_out | and_13_out | and_14_out | and_15_out | and_16_out | and_17_out | and_18_out | and_19_out | and_20_out;
  assign F2 = or_1_out;
  assign and_12_out = not_0_out & D2 & not_2_out & not_3_out & not_4_out & D6;
  assign and_9_out = not_0_out & not_1_out & D3 & not_3_out & not_4_out & D6;
  assign and_7_out = not_0_out & not_1_out & not_2_out & D4 & not_4_out & D6;
  assign and_6_out = not_0_out & not_1_out & not_2_out & not_3_out & D5 & D6;
  assign and_0_out = not_0_out & not_1_out & not_2_out & not_3_out & not_4_out & D6;
  assign or_0_out = and_0_out | and_1_out | and_2_out | and_3_out | and_4_out | and_5_out;
  assign F1 = or_0_out;
  assign not_5_out = ~D6;
  assign and_61_out = D1 & D2 & D3 & D4 & D5 & not_5_out;
  assign and_55_out = D1 & D2 & D3 & D4 & not_4_out & not_5_out;
  assign and_54_out = D1 & D2 & D3 & not_3_out & D5 & not_5_out;
  assign and_52_out = D1 & D2 & not_2_out & D4 & D5 & not_5_out;
  assign and_49_out = D1 & not_1_out & D3 & D4 & D5 & not_5_out;
  assign and_45_out = not_0_out & D2 & D3 & D4 & D5 & not_5_out;
  assign and_40_out = D1 & D2 & D3 & not_3_out & not_4_out & not_5_out;
  assign and_39_out = D1 & D2 & not_2_out & D4 & not_4_out & not_5_out;
  assign and_38_out = D1 & D2 & not_2_out & not_3_out & D5 & not_5_out;
  assign and_36_out = D1 & not_1_out & D3 & D4 & not_4_out & not_5_out;
  assign and_35_out = D1 & not_1_out & D3 & not_3_out & D5 & not_5_out;
  assign and_33_out = D1 & not_1_out & not_2_out & D4 & D5 & not_5_out;
  assign and_30_out = not_0_out & D2 & D3 & D4 & not_4_out & not_5_out;
  assign and_29_out = not_0_out & D2 & D3 & not_3_out & D5 & not_5_out;
  assign and_27_out = not_0_out & D2 & not_2_out & D4 & D5 & not_5_out;
  assign and_24_out = not_0_out & not_1_out & D3 & D4 & D5 & not_5_out;
  assign and_20_out = D1 & D2 & not_2_out & not_3_out & not_4_out & not_5_out;
  assign and_19_out = D1 & not_1_out & D3 & not_3_out & not_4_out & not_5_out;
  assign and_18_out = D1 & not_1_out & not_2_out & D4 & not_4_out & not_5_out;
  assign and_17_out = D1 & not_1_out & not_2_out & not_3_out & D5 & not_5_out;
  assign and_15_out = not_0_out & D2 & D3 & not_3_out & not_4_out & not_5_out;
  assign and_14_out = not_0_out & D2 & not_2_out & D4 & not_4_out & not_5_out;
  assign and_13_out = not_0_out & D2 & not_2_out & not_3_out & D5 & not_5_out;
  assign and_11_out = not_0_out & not_1_out & D3 & D4 & not_4_out & not_5_out;
  assign and_10_out = not_0_out & not_1_out & D3 & not_3_out & D5 & not_5_out;
  assign and_8_out = not_0_out & not_1_out & not_2_out & D4 & D5 & not_5_out;
  assign and_5_out = D1 & not_1_out & not_2_out & not_3_out & not_4_out & not_5_out;
  assign and_4_out = not_0_out & D2 & not_2_out & not_3_out & not_4_out & not_5_out;
  assign and_3_out = not_0_out & not_1_out & D3 & not_3_out & not_4_out & not_5_out;
  assign and_2_out = not_0_out & not_1_out & not_2_out & D4 & not_4_out & not_5_out;
  assign and_1_out = not_0_out & not_1_out & not_2_out & not_3_out & D5 & not_5_out;
  assign not_4_out = ~D5;
  assign not_3_out = ~D4;
  assign not_2_out = ~D3;
  assign not_1_out = ~D2;
  assign not_0_out = ~D1;
  assign _C_ = 1'b1;
  assign not_6_out = ~_C_;
endmodule

module Prize_Selector(P1, P2, P3, P4, P5, P6, T0, T1, T2, T3, T4, T5, T6, T7);
  output P1,  P2,  P3,  P4,  P5,  P6;
  input T0, T1, T2, T3, T4, T5, T6, T7;
  wire or_0_out, or_1_out, or_2_out, or_3_out, or_4_out, or_5_out, not_7_out, and_8_out, and_0_out, not_6_out, and_5_out, and_7_out, and_1_out, not_5_out, and_6_out, and_2_out, not_4_out, and_4_out, and_3_out, not_3_out, not_2_out, not_1_out, not_0_out, _C_, not_8_out;
  assign or_0_out = T7 | T1 | T0;
  assign P1 = or_0_out;
  assign or_1_out = T7 | and_0_out | and_1_out | and_2_out | and_3_out | T0;
  assign P2 = or_1_out;
  assign or_2_out = T7 | and_4_out | and_5_out | T0;
  assign P3 = or_2_out;
  assign or_3_out = T7 | and_6_out | T0;
  assign P4 = or_3_out;
  assign or_4_out = T7 | and_7_out | T0;
  assign P5 = or_4_out;
  assign or_5_out = T7 | and_8_out | T0;
  assign P6 = or_5_out;
  assign not_7_out = ~T7;
  assign and_8_out = not_1_out & not_2_out & not_3_out & not_4_out & not_5_out & T6;
  assign and_0_out = not_1_out & T2 & T6;
  assign not_6_out = ~T6;
  assign and_5_out = not_1_out & T2 & not_3_out & not_4_out & not_5_out & not_6_out;
  assign and_7_out = not_1_out & not_2_out & not_3_out & not_4_out & T5;
  assign and_1_out = not_1_out & T2 & T5;
  assign not_5_out = ~T5;
  assign and_6_out = not_1_out & not_2_out & not_3_out & T4;
  assign and_2_out = not_1_out & T2 & T4;
  assign not_4_out = ~T4;
  assign and_4_out = not_1_out & not_2_out & T3;
  assign and_3_out = not_1_out & T2 & T3;
  assign not_3_out = ~T3;
  assign not_2_out = ~T2;
  assign not_1_out = ~T1;
  assign not_0_out = ~T0;
  assign _C_ = 1'b1;
  assign not_8_out = ~_C_;
endmodule

module Prize_2_Condition(Z, L1, L2, L3, L4, L5, L6);
  output Z;
  input L1, L2, L3, L4, L5, L6;
  wire and_10_out, or_0_out, and_6_out, and_3_out, and_1_out, and_0_out, not_5_out, and_14_out, and_13_out, and_12_out, and_11_out, and_9_out, and_8_out, and_7_out, and_5_out, and_4_out, and_2_out, not_4_out, not_3_out, not_2_out, not_1_out, not_0_out, _C_, not_6_out;
  assign and_10_out = L1 & not_1_out & not_2_out & not_3_out & not_4_out & L6;
  assign or_0_out = and_0_out | and_1_out | and_2_out | and_3_out | and_4_out | and_5_out | and_6_out | and_7_out | and_8_out | and_9_out | and_10_out | and_11_out | and_12_out | and_13_out | and_14_out;
  assign Z = or_0_out;
  assign and_6_out = not_0_out & L2 & not_2_out & not_3_out & not_4_out & L6;
  assign and_3_out = not_0_out & not_1_out & L3 & not_3_out & not_4_out & L6;
  assign and_1_out = not_0_out & not_1_out & not_2_out & L4 & not_4_out & L6;
  assign and_0_out = not_0_out & not_1_out & not_2_out & not_3_out & L5 & L6;
  assign not_5_out = ~L6;
  assign and_14_out = L1 & L2 & not_2_out & not_3_out & not_4_out & not_5_out;
  assign and_13_out = L1 & not_1_out & L3 & not_3_out & not_4_out & not_5_out;
  assign and_12_out = L1 & not_1_out & not_2_out & L4 & not_4_out & not_5_out;
  assign and_11_out = L1 & not_1_out & not_2_out & not_3_out & L5 & not_5_out;
  assign and_9_out = not_0_out & L2 & L3 & not_3_out & not_4_out & not_5_out;
  assign and_8_out = not_0_out & L2 & not_2_out & L4 & not_4_out & not_5_out;
  assign and_7_out = not_0_out & L2 & not_2_out & not_3_out & L5 & not_5_out;
  assign and_5_out = not_0_out & not_1_out & L3 & L4 & not_4_out & not_5_out;
  assign and_4_out = not_0_out & not_1_out & L3 & not_3_out & L5 & not_5_out;
  assign and_2_out = not_0_out & not_1_out & not_2_out & L4 & L5 & not_5_out;
  assign not_4_out = ~L5;
  assign not_3_out = ~L4;
  assign not_2_out = ~L3;
  assign not_1_out = ~L2;
  assign not_0_out = ~L1;
  assign _C_ = 1'b1;
  assign not_6_out = ~_C_;
endmodule





module Main(P1, P2, P5, P4, P6, P3, D2, D5, D4, D3, D6, D1);
  output P1,  P2,  P5,  P4,  P6,  P3;
  input [2:0] D2, D5, D4, D3, D6, D1;
  wire Dice_Value_Decoder_0_out_0, Dice_Value_Decoder_0_out_1, Dice_Value_Decoder_0_out_2, Dice_Value_Decoder_0_out_3, Dice_Value_Decoder_0_out_4, Dice_Value_Decoder_0_out_5, Dice_Value_Decoder_0_out_6, Dice_Value_Decoder_0_out_7, or_1_out, Prize_Selector_12_out_0, Prize_Selector_12_out_1, Prize_Selector_12_out_2, Prize_Selector_12_out_3, Prize_Selector_12_out_4, Prize_Selector_12_out_5, Counter_11_out_0, Counter_11_out_1, Counter_11_out_2, Counter_11_out_3, Counter_11_out_4, Counter_11_out_5, or_2_out, or_6_out, or_3_out, Prize_2_Condition_13_out, or_4_out, and_0_out, Counter_9_out_0, Counter_9_out_1, Counter_9_out_2, Counter_9_out_3, Counter_9_out_4, Counter_9_out_5, Counter_10_out_0, Counter_10_out_1, Counter_10_out_2, Counter_10_out_3, Counter_10_out_4, Counter_10_out_5, or_5_out, Counter_8_out_0, Counter_8_out_1, Counter_8_out_2, Counter_8_out_3, Counter_8_out_4, Counter_8_out_5, Counter_7_out_0, Counter_7_out_1, Counter_7_out_2, Counter_7_out_3, Counter_7_out_4, Counter_7_out_5, Counter_6_out_0, Counter_6_out_1, Counter_6_out_2, Counter_6_out_3, Counter_6_out_4, Counter_6_out_5, or_0_out, Dice_Value_Decoder_5_out_0, Dice_Value_Decoder_5_out_1, Dice_Value_Decoder_5_out_2, Dice_Value_Decoder_5_out_3, Dice_Value_Decoder_5_out_4, Dice_Value_Decoder_5_out_5, Dice_Value_Decoder_5_out_6, Dice_Value_Decoder_5_out_7, Dice_Value_Decoder_2_out_0, Dice_Value_Decoder_2_out_1, Dice_Value_Decoder_2_out_2, Dice_Value_Decoder_2_out_3, Dice_Value_Decoder_2_out_4, Dice_Value_Decoder_2_out_5, Dice_Value_Decoder_2_out_6, Dice_Value_Decoder_2_out_7, Dice_Value_Decoder_3_out_0, Dice_Value_Decoder_3_out_1, Dice_Value_Decoder_3_out_2, Dice_Value_Decoder_3_out_3, Dice_Value_Decoder_3_out_4, Dice_Value_Decoder_3_out_5, Dice_Value_Decoder_3_out_6, Dice_Value_Decoder_3_out_7, Dice_Value_Decoder_4_out_0, Dice_Value_Decoder_4_out_1, Dice_Value_Decoder_4_out_2, Dice_Value_Decoder_4_out_3, Dice_Value_Decoder_4_out_4, Dice_Value_Decoder_4_out_5, Dice_Value_Decoder_4_out_6, Dice_Value_Decoder_4_out_7, Dice_Value_Decoder_1_out_0, Dice_Value_Decoder_1_out_1, Dice_Value_Decoder_1_out_2, Dice_Value_Decoder_1_out_3, Dice_Value_Decoder_1_out_4, Dice_Value_Decoder_1_out_5, Dice_Value_Decoder_1_out_6, Dice_Value_Decoder_1_out_7;
  
  Dice_Value_Decoder Dice_Value_Decoder_0(Dice_Value_Decoder_0_out_0, Dice_Value_Decoder_0_out_1, Dice_Value_Decoder_0_out_2, Dice_Value_Decoder_0_out_3, Dice_Value_Decoder_0_out_4, Dice_Value_Decoder_0_out_5, Dice_Value_Decoder_0_out_6, Dice_Value_Decoder_0_out_7, D1[2], D1[1], D1[0]);
  assign or_1_out = Dice_Value_Decoder_0_out_7 | Dice_Value_Decoder_1_out_7 | Dice_Value_Decoder_2_out_7 | Dice_Value_Decoder_3_out_7 | Dice_Value_Decoder_4_out_7 | Dice_Value_Decoder_5_out_7;
  Prize_Selector Prize_Selector_12(Prize_Selector_12_out_0, Prize_Selector_12_out_1, Prize_Selector_12_out_2, Prize_Selector_12_out_3, Prize_Selector_12_out_4, Prize_Selector_12_out_5, or_0_out, or_6_out, or_4_out, Counter_10_out_2, or_3_out, Counter_10_out_1, Counter_10_out_0, or_1_out);
  assign P6 = Prize_Selector_12_out_5;
  
      always @ (*)
        $display("DigitalLed:Prize_Selector_12_out_5=%d", Prize_Selector_12_out_5);
  assign P5 = Prize_Selector_12_out_4;
  
      always @ (*)
        $display("DigitalLed:Prize_Selector_12_out_4=%d", Prize_Selector_12_out_4);
  assign P4 = Prize_Selector_12_out_3;
  
      always @ (*)
        $display("DigitalLed:Prize_Selector_12_out_3=%d", Prize_Selector_12_out_3);
  assign P3 = Prize_Selector_12_out_2;
  
      always @ (*)
        $display("DigitalLed:Prize_Selector_12_out_2=%d", Prize_Selector_12_out_2);
  assign P2 = Prize_Selector_12_out_1;
  
      always @ (*)
        $display("DigitalLed:Prize_Selector_12_out_1=%d", Prize_Selector_12_out_1);
  assign P1 = Prize_Selector_12_out_0;
  
      always @ (*)
        $display("DigitalLed:Prize_Selector_12_out_0=%d", Prize_Selector_12_out_0);
  Counter Counter_11(Counter_11_out_0, Counter_11_out_1, Counter_11_out_2, Counter_11_out_3, Counter_11_out_4, Counter_11_out_5, Dice_Value_Decoder_0_out_6, Dice_Value_Decoder_1_out_6, Dice_Value_Decoder_2_out_6, Dice_Value_Decoder_3_out_6, Dice_Value_Decoder_4_out_6, Dice_Value_Decoder_5_out_6);
  assign or_2_out = Counter_6_out_4 | Counter_7_out_4 | Counter_8_out_4 | Counter_10_out_3 | Counter_9_out_4 | Counter_11_out_4;
  assign or_6_out = or_5_out | or_2_out;
  assign or_3_out = Counter_6_out_3 | Counter_7_out_3 | Counter_8_out_3 | Counter_9_out_3 | Counter_11_out_3;
  Prize_2_Condition Prize_2_Condition_13(Prize_2_Condition_13_out, Counter_6_out_2, Counter_7_out_2, Counter_8_out_2, Counter_10_out_2, Counter_9_out_2, Counter_11_out_2);
  assign or_4_out = Prize_2_Condition_13_out | and_0_out;
  assign and_0_out = Counter_8_out_0 & Counter_7_out_0 & Counter_6_out_0 & Counter_10_out_0 & Counter_9_out_0 & Counter_11_out_0;
  Counter Counter_9(Counter_9_out_0, Counter_9_out_1, Counter_9_out_2, Counter_9_out_3, Counter_9_out_4, Counter_9_out_5, Dice_Value_Decoder_0_out_5, Dice_Value_Decoder_1_out_5, Dice_Value_Decoder_2_out_5, Dice_Value_Decoder_3_out_5, Dice_Value_Decoder_4_out_5, Dice_Value_Decoder_5_out_5);
  Counter Counter_10(Counter_10_out_0, Counter_10_out_1, Counter_10_out_2, Counter_10_out_3, Counter_10_out_4, Counter_10_out_5, Dice_Value_Decoder_0_out_4, Dice_Value_Decoder_1_out_4, Dice_Value_Decoder_2_out_4, Dice_Value_Decoder_3_out_4, Dice_Value_Decoder_4_out_4, Dice_Value_Decoder_5_out_4);
  assign or_5_out = Counter_10_out_4 | Counter_10_out_5;
  Counter Counter_8(Counter_8_out_0, Counter_8_out_1, Counter_8_out_2, Counter_8_out_3, Counter_8_out_4, Counter_8_out_5, Dice_Value_Decoder_0_out_3, Dice_Value_Decoder_1_out_3, Dice_Value_Decoder_2_out_3, Dice_Value_Decoder_3_out_3, Dice_Value_Decoder_4_out_3, Dice_Value_Decoder_5_out_3);
  Counter Counter_7(Counter_7_out_0, Counter_7_out_1, Counter_7_out_2, Counter_7_out_3, Counter_7_out_4, Counter_7_out_5, Dice_Value_Decoder_0_out_2, Dice_Value_Decoder_1_out_2, Dice_Value_Decoder_2_out_2, Dice_Value_Decoder_3_out_2, Dice_Value_Decoder_4_out_2, Dice_Value_Decoder_5_out_2);
  Counter Counter_6(Counter_6_out_0, Counter_6_out_1, Counter_6_out_2, Counter_6_out_3, Counter_6_out_4, Counter_6_out_5, Dice_Value_Decoder_0_out_1, Dice_Value_Decoder_1_out_1, Dice_Value_Decoder_2_out_1, Dice_Value_Decoder_3_out_1, Dice_Value_Decoder_4_out_1, Dice_Value_Decoder_5_out_1);
  assign or_0_out = Dice_Value_Decoder_0_out_0 | Dice_Value_Decoder_1_out_0 | Dice_Value_Decoder_2_out_0 | Dice_Value_Decoder_3_out_0 | Dice_Value_Decoder_4_out_0 | Dice_Value_Decoder_5_out_0;
  
  Dice_Value_Decoder Dice_Value_Decoder_5(Dice_Value_Decoder_5_out_0, Dice_Value_Decoder_5_out_1, Dice_Value_Decoder_5_out_2, Dice_Value_Decoder_5_out_3, Dice_Value_Decoder_5_out_4, Dice_Value_Decoder_5_out_5, Dice_Value_Decoder_5_out_6, Dice_Value_Decoder_5_out_7, D6[2], D6[1], D6[0]);
  
  Dice_Value_Decoder Dice_Value_Decoder_2(Dice_Value_Decoder_2_out_0, Dice_Value_Decoder_2_out_1, Dice_Value_Decoder_2_out_2, Dice_Value_Decoder_2_out_3, Dice_Value_Decoder_2_out_4, Dice_Value_Decoder_2_out_5, Dice_Value_Decoder_2_out_6, Dice_Value_Decoder_2_out_7, D3[2], D3[1], D3[0]);
  
  Dice_Value_Decoder Dice_Value_Decoder_3(Dice_Value_Decoder_3_out_0, Dice_Value_Decoder_3_out_1, Dice_Value_Decoder_3_out_2, Dice_Value_Decoder_3_out_3, Dice_Value_Decoder_3_out_4, Dice_Value_Decoder_3_out_5, Dice_Value_Decoder_3_out_6, Dice_Value_Decoder_3_out_7, D4[2], D4[1], D4[0]);
  
  Dice_Value_Decoder Dice_Value_Decoder_4(Dice_Value_Decoder_4_out_0, Dice_Value_Decoder_4_out_1, Dice_Value_Decoder_4_out_2, Dice_Value_Decoder_4_out_3, Dice_Value_Decoder_4_out_4, Dice_Value_Decoder_4_out_5, Dice_Value_Decoder_4_out_6, Dice_Value_Decoder_4_out_7, D5[2], D5[1], D5[0]);
  
  Dice_Value_Decoder Dice_Value_Decoder_1(Dice_Value_Decoder_1_out_0, Dice_Value_Decoder_1_out_1, Dice_Value_Decoder_1_out_2, Dice_Value_Decoder_1_out_3, Dice_Value_Decoder_1_out_4, Dice_Value_Decoder_1_out_5, Dice_Value_Decoder_1_out_6, Dice_Value_Decoder_1_out_7, D2[2], D2[1], D2[0]);
endmodule
